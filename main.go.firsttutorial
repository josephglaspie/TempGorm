package main

import (
	"log"
	"time"

	_ "github.com/go-sql-driver/mysql"
	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql" //You could import dialect
)

type UserModel struct {
	Id      int    `gorm:"primary_key";"AUTO_INCREMENT"`
	Name    string `gorm:"size:255"`
	Address string `gorm:"type:varchar(100)‚Äù`
}

type Model struct {
	ID        uint `gorm:"primary_key"`
	CreatedAt time.Time
	UpdatedAt time.Time
	DeletedAt *time.Time
}

type User struct {
	gorm.Model
	Name string
}

var users []UserModel = []UserModel{
	UserModel{Name: "Ricky", Address: "Sydney"},
	UserModel{Name: "Adam", Address: "Brisbane"},
	UserModel{Name: "Justin", Address: "California"},
}

func main() {
	db, err := gorm.Open("mysql", "root@tcp(127.0.0.1:3306)/ormdemo?charset=utf8&parseTime=True")
	defer db.Close()

	if err != nil {
		log.Panic(err, "...FOOBAR'd")
	}
	log.Println("Good to go")


	db.Debug().DropTableIfExists(&UserModel{})
	db.Debug().AutoMigrate(&UserModel{})

	for _, user := range users {
		db.Create(&user)
	}
	user := &UserModel{Name: "John", Address: "New York"}
	// Select, edit, and save
	db.Find(&user)
	user.Address = "Brisbane"
	db.Save(&user)

	// Update with column names, not attribute names
	db.Model(&user).Update("Name", "Jack")

	db.Model(&user).Updates(
		map[string]interface{}{
			"Name":    "Amy",
			"Address": "Boston",
		})

	// UpdateColumn()
	db.Model(&user).UpdateColumn("Address", "Phoenix")
	db.Model(&user).UpdateColumns(
		map[string]interface{}{
			"Name":    "Taylor",
			"Address": "Houston",
		})
	// Using Find()
	db.Find(&user).Update("Address", "San Diego")

	// Batch Update
	db.Table("user_models").Where("address = ?", "california").Update("name", "Walker")
}
